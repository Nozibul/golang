/*
GoLang Concurrency & Rune in Golang

Rune কী?
Go এ Rune হল একটি টাইপ যা int32 এর সমতুল্য, এবং এটি ইউনিকোড কোড
পয়েন্ট (Unicode Code Point) এর প্রতিনিধিত্ব করে। ইউনিকোড হল একটি স্ট্যান্ডার্ড যা
পৃথিবীর সমস্ত ভাষার অক্ষরসমূহকে একটি ইউনিকোড কোড পয়েন্ট দ্বারা চিহ্নিত করে।

ASCII এবং Unicode এর পার্থক্য:
1. ASCII (American Standard Code for Information Interchange) শুধুমাত্র 128টি
চরিত্র ধারণ করে, যা ইংরেজি অক্ষর, সংখ্যা এবং কিছু নির্দিষ্ট চিহ্ন যেমন পাঞ্চুয়েশন
সিম্বল এবং কন্ট্রোল ক্যারেক্টার।
2. কিন্তু Unicode এর সাহায্যে পৃথিবীর সব ভাষার অক্ষর, সিম্বল, এক্সেন্ট এবং বিশেষ
চিহ্নগুলোকে সমর্থন করা যায়। এটি ASCII এর চেয়ে অনেক বড় এবং বিশ্বের সকল
ভাষার অক্ষর সমর্থন করে।

Rune এর ব্যবহার:
Go এ কোন অক্ষরকে আপনি একটি রুন হিসাবে ব্যবহার করতে পারেন।
উদাহরণস্বরূপ, 'A' একটি রুন যা ASCII কোড 65 (U+0041) এবং '♛' একটি রুন
যা Unicode কোড U+265B।

Rune Literal:
গোল্যাং-এ Rune Literal হলো একটি একক ক্যারেক্টার যা একক উদ্ধৃতি
(single quotes) এর মধ্যে থাকে, যেমন 'a', '\t' ইত্যাদি। এই ক্যারেক্টারগুলির
মাধ্যমে আপনি বিভিন্ন ইউনিকোড চরিত্রকে প্রতিনিধিত্ব করতে পারেন। বিশেষ কিছু চরিত্র
যেমন '\n' (নিউলাইন), '\t' (ট্যাব) ইত্যাদি বিশেষভাবে ব্যবহৃত হয়।

গুরুত্বপূর্ণ পয়েন্টস:
1. স্ট্রিং এবং রুন: গোল্যাং-এ একটি স্ট্রিং হচ্ছে বাইটের একটি সিকোয়েন্স, কিন্তু একটি রুন
হচ্ছে ইউনিকোড কোড পয়েন্টের প্রতিনিধিত্ব। একটি স্ট্রিং UTF-8 এনকোডিংয়ে থাকে,
কিন্তু রুন সাধারণত int32 হিসেবে সংরক্ষিত হয়।

2. রুন লিটারেল: একক উদ্ধৃতিতে একটি চরিত্র বা বিশেষ সিকোয়েন্স যেমন \n, \t
ব্যবহার করা হয়।

3. বিশেষ রুন: যেমন \a (বেল সাউন্ড), \b (ব্যাকস্পেস), \n (নিউলাইন), ইত্যাদি
গোল্যাং-এ বিশেষভাবে ব্যবহৃত হয়।

উপসংহার:
গোল্যাং-এ Rune একটি গুরুত্বপূর্ণ ডেটা টাইপ যা ইউনিকোড কোড পয়েন্টকে প্রতিনিধিত্ব
করে। এটি বিভিন্ন ভাষার অক্ষর এবং বিশেষ চিহ্ন সংরক্ষণে ব্যবহৃত হয়। Rune Literal
ব্যবহার করে আপনি সহজেই বিশেষ ইউনিকোড চরিত্রগুলোকে কোডে প্রকাশ করতে পারেন।
*/
package main

import (
	"fmt"
	"reflect"
)

func main() {
	// Rune তৈরি করা
	rune1 := 'B'  // 'B' একটি রুন
	rune2 := 'g'  // 'g' একটি রুন
	rune3 := '\a' // '\a' হলো এক বিশেষ রুন (Bell)

	// রুনের আউটপুট
	fmt.Printf("Rune 1: %c; Unicode: %U; Type: %s", rune1, rune1, reflect.TypeOf(rune1))
	fmt.Printf("\nRune 2: %c; Unicode: %U; Type: %s", rune2, rune2, reflect.TypeOf(rune2))
	fmt.Printf("\nRune 3: Unicode: %U; Type: %s", rune3, reflect.TypeOf(rune3))

	/*
		Rune 1: B; Unicode: U+0042; Type: int32
		Rune 2: g; Unicode: U+0067; Type: int32
		Rune 3: Unicode: U+0007; Type: int32
	*/

	// Rune Example 2 (বিশেষ চিহ্ন):
	runes := []rune{'♛', '♠', '♧', '♡', '♬'}

	for i, r := range runes {
		fmt.Printf("Character: %c, Unicode:U+%04X, Position:%d\n", r, r, i)
	}

	/*
		Character: ♛, Unicode: U+265B, Position: 0
		Character: ♠, Unicode: U+2660, Position: 1
		Character: ♧, Unicode: U+2667, Position: 2
		Character: ♡, Unicode: U+2661, Position: 3
		Character: ♬, Unicode: U+266C, Position: 4

	*/

}
