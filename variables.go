/*
                  // Go Variable Types
In Go, there are different types of variables, for example:

int- stores integers (whole numbers), such as 123 or -123
float32- stores floating point numbers, with decimals, such as 19.99 or -19.99
float32 ржПрж░ рждрзБрж▓ржирж╛ржпрж╝ float64 ржмрзЗрж╢рж┐ ржирж┐рж░рзНржнрзБрж▓рждрж╛ ржжрзЗрзЯ ржПржмржВ ржмрзГрж╣рзО рж╕ржВржЦрзНржпрж╛рж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ ржХржо рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝ред
ржПржЯрж┐ 64-ржмрж┐ржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ, ржпрж╛рж░ ржлрж▓рзЗ ржжрж╢ржорж┐ржХрзЗрж░ ржкрж░рзЗ ржЖрж░ржУ ржмрзЗрж╢рж┐ рж╕ржВржЦрзНржпрж╛ рж╕ржарж┐ржХржнрж╛ржмрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ ржпрж╛ржпрж╝ред

ржЙржжрж╛рж╣рж░ржг:
3.141592653589793 (╧А ржПрж░ рж╕рзБржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржорж╛ржи)
-273.15 (рж╢рзВржирзНржп ржХрзЗрж▓ржнрж┐ржи)

string - stores text, such as "Hello World". String values are surrounded by double quotes
bool- stores values with two states: true or false


                      // Declaring (Creating) Variables
In Go, there are two ways to declare a variable:
1. With the var keyword:
 Example:
 var variablename type := value ;
 var newSrt string := "Go developer"

 Note: You always have to specify either type or value (or both).

2. With the := sign:
Use the := sign, followed by the variable value:

Syntax
variablename := value

Note: In this case, the type of the variable is inferred from the
value (means that the compiler decides the type of the variable, based on the value).
ржжрзНрж░рж╖рзНржЯржмрзНржп: ржПржЗ ржХрзНрж╖рзЗрждрзНрж░рзЗ, ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓рзЗрж░ ржзрж░ржиржЯрж┐ ржорж╛ржи ржерзЗржХрзЗ ржЕржирзБржорж╛ржи ржХрж░рж╛ рж╣ржпрж╝ (ржорж╛ржирзЗ ржХржорзНржкрж╛ржЗрж▓рж╛рж░ ржорж╛ржирзЗрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ ржкрж░рж┐ржмрж░рзНрждржирж╢рзАрж▓рзЗрж░ ржкрзНрж░ржХрж╛рж░ ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рзЗ)ред

Note: It is not possible to declare a variable using :=, without assigning a value to it.
ржжрзНрж░рж╖рзНржЯржмрзНржп: ржПржЯрж┐рждрзЗ ржПржХржЯрж┐ ржорж╛ржи ржирж┐рж░рзНржзрж╛рж░ржг ржирж╛ ржХрж░рзЗ := ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржПржХржЯрж┐ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржШрзЛрж╖ржгрж╛ ржХрж░рж╛ рж╕ржорзНржнржм ржиржпрж╝ред

*/

package main

import (
	"fmt"
	"math"
)

var a int
var e int = 2
var f = 3

func main() {

	//1. Variable Declaration With Initial Value

	var student1 string = "John" //type is string
	var student2 = "Jane"        //type is inferred means ржЕржирзБржорж╛ржи ржХрж░рж╛
	/*
		ЁЯФ╣ ржПржЦрж╛ржирзЗ student2 ржирж╛ржорзЗ ржПржХржЯрж┐ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржбрж┐ржХрзНрж▓рзЗржпрж╝рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
		ЁЯФ╣ var ржХрзАржУржпрж╝рж╛рж░рзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ, ржХрж┐ржирзНрждрзБ ржЯрж╛ржЗржк (string) рж╕рж░рж╛рж╕рж░рж┐ ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рж╛ рж╣ржпрж╝ржирж┐ред
		ЁЯФ╣ Go рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржЯрж╛ржЗржк "Jane" ржжрзЗржЦрзЗ ржмрзБржЭрждрзЗ ржкрж╛рж░рзЗ ржпрзЗ ржПржЯрж┐ stringред
		ЁЯФ╣ ржПржХрзЗ ржмрж▓рзЗ type inference ржмрж╛ ржЯрж╛ржЗржк ржЕржирзБржорж╛ржи ржХрж░рж╛ред
	*/
	x := 2 //type is inferred
	/*
	   ЁЯФ╣ ржПржЦрж╛ржирзЗ x ржирж╛ржорзЗ ржПржХржЯрж┐ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржбрж┐ржХрзНрж▓рзЗржпрж╝рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
	   ЁЯФ╣ := ржЕржкрж╛рж░рзЗржЯрж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржбрж┐ржХрзНрж▓рзЗржпрж╝рж╛рж░ ржПржмржВ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
	   ЁЯФ╣ 2 ржжрзЗржЦрзЗ Go ржмрзБржЭрждрзЗ ржкрж╛рж░рзЗ ржпрзЗ x ржПрж░ ржЯрж╛ржЗржк int рж╣ржмрзЗред
	   ЁЯФ╣ ржПржЯрж┐ short variable declaration ржкржжрзНржзрждрж┐, ржпрж╛ рж╢рзБржзрзБржорж╛рждрзНрж░ function ржПрж░ ржнрж┐рждрж░рзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛ржпрж╝ред
	*/

	/*

		1.

		go
		Copy code
		var student1 string = "John" //type is string
		ЁЯФ╣ ржПржЦрж╛ржирзЗ student1 ржирж╛ржорзЗ ржПржХржЯрж┐ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржбрж┐ржХрзНрж▓рзЗржпрж╝рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
		ЁЯФ╣ var ржХрзАржУржпрж╝рж╛рж░рзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╕рзНржкрж╖рзНржЯржнрж╛ржмрзЗ string ржЯрж╛ржЗржк ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
		ЁЯФ╣ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓рзЗрж░ ржорж╛ржи "John" рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ, ржПржмржВ ржПржЯрж┐ string ржЯрж╛ржЗржкрзЗрж░ ржХрж╛рж░ржг ржПржЯрж┐ рж╕рзНржкрж╖рзНржЯржнрж╛ржмрзЗ рж▓рзЗржЦрж╛ ржЖржЫрзЗред

		2.

		go
		Copy code
		var student2 = "Jane"        //type is inferred means ржЕржирзБржорж╛ржи ржХрж░рж╛
		ЁЯФ╣ ржПржЦрж╛ржирзЗ student2 ржирж╛ржорзЗ ржПржХржЯрж┐ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржбрж┐ржХрзНрж▓рзЗржпрж╝рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
		ЁЯФ╣ var ржХрзАржУржпрж╝рж╛рж░рзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ, ржХрж┐ржирзНрждрзБ ржЯрж╛ржЗржк (string) рж╕рж░рж╛рж╕рж░рж┐ ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рж╛ рж╣ржпрж╝ржирж┐ред
		ЁЯФ╣ Go рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржЯрж╛ржЗржк "Jane" ржжрзЗржЦрзЗ ржмрзБржЭрждрзЗ ржкрж╛рж░рзЗ ржпрзЗ ржПржЯрж┐ stringред
		ЁЯФ╣ ржПржХрзЗ ржмрж▓рзЗ type inference ржмрж╛ ржЯрж╛ржЗржк ржЕржирзБржорж╛ржи ржХрж░рж╛ред

		3.

		go
		Copy code
		x := 2                       //type is inferred
		ЁЯФ╣ ржПржЦрж╛ржирзЗ x ржирж╛ржорзЗ ржПржХржЯрж┐ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржбрж┐ржХрзНрж▓рзЗржпрж╝рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
		ЁЯФ╣ := ржЕржкрж╛рж░рзЗржЯрж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржбрж┐ржХрзНрж▓рзЗржпрж╝рж╛рж░ ржПржмржВ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
		ЁЯФ╣ 2 ржжрзЗржЦрзЗ Go ржмрзБржЭрждрзЗ ржкрж╛рж░рзЗ ржпрзЗ x ржПрж░ ржЯрж╛ржЗржк int рж╣ржмрзЗред
		ЁЯФ╣ ржПржЯрж┐ short variable declaration ржкржжрзНржзрждрж┐, ржпрж╛ рж╢рзБржзрзБржорж╛рждрзНрж░ function ржПрж░ ржнрж┐рждрж░рзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛ржпрж╝ред

		рж╕рж╛рж░рж╛ржВрж╢:

		var ржмрзНржпржмрж╣рж╛рж░рзЗ ржЯрж╛ржЗржк ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рж╛ ржРржЪрзНржЫрж┐ржХ, ржХрж╛рж░ржг Go ржЯрж╛ржЗржк ржЕржирзБржорж╛ржи ржХрж░рждрзЗ ржкрж╛рж░рзЗред
		:= ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ Go ржЯрж╛ржЗржк рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рзЗред
	*/

	fmt.Println(student1) // John
	fmt.Println(student2) // Jane
	fmt.Println(x)        // 2

	//2. Variable Declaration Without Initial Value
	var g string
	var b int
	var c bool

	fmt.Println(a) // empty string
	fmt.Println(b) // 0
	fmt.Println(c) // false

	//3. Value Assignment After Declaration
	//It is possible to assign a value to a variable after it is declared.
	//This is helpful for cases the value is not initially known.

	//  Note: It is not possible to declare a variable using ":=" without assigning a value to it.

	var student4 string
	student4 = "John"
	fmt.Println(student4) // John

	// This example shows declaring variables outside of a function, with the var keyword:

	//  g = 1;
	fmt.Println(g) // 1
	fmt.Println(e) // 2
	fmt.Println(f) // 3

	// Since := is used outside of a function, running the program results in an error.

	/*                       // Go Multiple Variable Declaration
	In Go, it is possible to declare multiple variables in the same line.
	*/
	var s, t, p, q int = 1, 3, 5, 7

	fmt.Println(s) // 1
	fmt.Println(t) // 2
	fmt.Println(p) // 3
	fmt.Println(q) // 4

	// Note: If you use the type keyword, it is only possible to declare one type of variable per line.
	// ржжрзНрж░рж╖рзНржЯржмрзНржп: ржЖржкржирж┐ ржпржжрж┐ ржЯрж╛ржЗржк ржХрзАржУржпрж╝рж╛рж░рзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржи, рждржмрзЗ ржкрзНрж░рждрж┐ рж▓рж╛ржЗржирзЗ рж╢рзБржзрзБржорж╛рждрзНрж░ ржПржХ ржзрж░ржирзЗрж░ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржШрзЛрж╖ржгрж╛ ржХрж░рж╛ рж╕ржорзНржнржмред

	var aa, bb = 6, "Hello"
	cc, dd := 7, "World!"

	fmt.Println(aa) // 6
	fmt.Println(bb) // Hello
	fmt.Println(cc) // 7
	fmt.Println(dd) // World

	/*
	                       // Go Variable Declaration in a Block
	   Multiple variable declarations can also be grouped together into a block for greater readability:
	*/

	var (
		ages   int             // ages ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓, ржпрж╛рж░ ржЯрж╛ржЗржк int (ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓ ржорж╛ржи ржирзЗржЗ, рждрж╛ржЗ 0 рж╣ржмрзЗ)
		number int    = 1      // number ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓, ржЯрж╛ржЗржк int ржПржмржВ ржорж╛ржи 1
		name   string = "Jhon" // name ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓, ржЯрж╛ржЗржк string ржПржмржВ ржорж╛ржи "hello"
	)

	fmt.Println(ages)   // 0
	fmt.Println(number) // 1
	fmt.Println(name)   // Jhon

	// A variable can be assigned to any value of its type.
	// In the above program, age can be assigned any integer value.

	var age int                                           // variable declaration
	fmt.Println("My initial age is", age)                 // 0
	age = 30                                              //assignment
	fmt.Println("My age after first assignment is", age)  //30
	age = 45                                              //assignment
	fmt.Println("My age after second assignment is", age) // 45

	//Short hand declaration

	count := 10
	numbers, userName := 45, "John"
	fmt.Println(count, numbers, userName)

	/*
	  ржПржЗ ржкрзНрж░рзЛржЧрзНрж░рж╛ржорзЗ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ рж╣ржмрзЗ ржХрж╛рж░ржг short hand declaration (:=) ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝рзЗржЫрзЗ,
	  ржХрж┐ржирзНрждрзБ рж╕ржорж╕рзНржд ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓рзЗрж░ ржЬржирзНржп ржкрзНрж░рж╛ржержорж┐ржХ ржорж╛ржи (initial value) ржкрзНрж░ржжрж╛ржи ржХрж░рж╛ рж╣ржпрж╝ржирж┐ред
	*/
	brotherName, num := "Naveen" //error

	fmt.Println("my name is", brotherName, "age is", num)
	/*
	   := ржЕржкрж╛рж░рзЗржЯрж░рзЗрж░ ржорж╛ржзрзНржпржорзЗ ржПржХрж╕рж╛ржерзЗ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржбрж┐ржХрзНрж▓рзЗржпрж╝рж╛рж░ ржПржмржВ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬ ржХрж░рж╛ рж╣ржпрж╝,
	   ржПржмржВ ржпржЦржи ржПржХрж╛ржзрж┐ржХ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржбрж┐ржХрзНрж▓рзЗржпрж╝рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝, рждржЦржи рждрж╛ржжрзЗрж░ ржкрзНрж░рждрзНржпрзЗржХржЯрж┐рж░ ржЬржирзНржп
	   ржкрзНрж░рж╛ржержорж┐ржХ ржорж╛ржи (initial value) ржжрж┐рждрзЗ рж╣ржпрж╝ред
	*/

	a, b := 20, 30                            // declare variables a and b
	fmt.Println("a is", a, "b is", b)         // a is 20 b is 30
	b, c := 40, 50                            // b is already declared but c is new
	fmt.Println("b is", b, "c is", c)         // b is 40 c is 50
	b, c = 80, 90                             // assign new values to already declared variables b and c
	fmt.Println("changed b is", b, "c is", c) // changed b is 80 c is 90

	// Whereas if we run the program below,
	a, b := 20, 30 //a and b declared
	fmt.Println("a is", a, "b is", b)
	a, b := 40, 50 //error, no new variables

	//Variables can also be assigned values which are computed during run
	// time. Consider the following program,

	y, z := 12.3, 3.4
	w := math.Min(y, z)
	fmt.Println(" value is", w) // value is 15.7

	ages := 65      // age is int
	ages = "Naveen" // error since we are trying to assign a string to a variable of type int

}

/*
Go-рждрзЗ := ржЕржкрж╛рж░рзЗржЯрж░ржЯрж┐ Short Variable Declaration ржЕржкрж╛рж░рзЗржЯрж░ ржирж╛ржорзЗ ржкрж░рж┐ржЪрж┐рждред

ЁЯФ╣ := ржЕржкрж╛рж░рзЗржЯрж░рзЗрж░ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп:
ржПржХрж╕рж╛ржерзЗ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржбрж┐ржХрзНрж▓рзЗржпрж╝рж╛рж░ ржПржмржВ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬ ржХрж░рзЗред
ржЯрж╛ржЗржк ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рждрзЗ рж╣ржпрж╝ ржирж╛, ржХрж╛рж░ржг Go рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржЯрж╛ржЗржк ржЕржирзБржорж╛ржи (type inference) ржХрж░рзЗред
рж╢рзБржзрзБржорж╛рждрзНрж░ function ржПрж░ ржнрж┐рждрж░рзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛ржпрж╝ред
*/

// Type inference
/*
ржпржжрж┐ ржПржХржЯрж┐ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓рзЗрж░ ржПржХржЯрж┐ ржкрзНрж░рж╛ржержорж┐ржХ ржорж╛ржи (initial value) ржерж╛ржХрзЗ, рждржмрзЗ Go рж╕рзЗржЗ ржорж╛ржи
ржжрзЗржЦрзЗ ржирж┐ржЬрзЗржЗ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓рзЗрж░ ржЯрж╛ржЗржк ржмрзБржЭрзЗ ржлрзЗрж▓рзЗред ржПрж░ ржорж╛ржирзЗ рж╣рж▓рзЛ, ржпржжрж┐ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓рзЗ ржЖржЧрзЗ
ржерзЗржХрзЗржЗ ржорж╛ржи ржжрзЗржУржпрж╝рж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржЯрж╛ржЗржк ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рж╛рж░ ржжрж░ржХрж╛рж░ ржирзЗржЗред Go рждрж╛ ржЕржЯрзЛ ржмрзБржЭрзЗ ржирзЗржпрж╝ред
*/

/*
                       Go Variable Naming Rules
A variable can have a short name (like x and y) or a more descriptive name (age, price, carname, etc.).

Go variable naming rules:

A variable name must start with a letter or an underscore character (_)
A variable name cannot start with a digit
A variable name can only contain alpha-numeric characters and underscores (a-z, A-Z, 0-9, and _ )
Variable names are case-sensitive (age, Age and AGE are three different variables)
There is no limit on the length of the variable name
A variable name cannot contain spaces
The variable name cannot be any Go keywords


                   Multi-Word Variable Names
Variable names with more than one word can be difficult to read.

There are several techniques you can use to make them more readable:

                      // Camel Case
Each word, except the first, starts with a capital letter:
myVariableName = "John"


                     // Pascal Case
Each word starts with a capital letter:
MyVariableName = "John"


                     // Snake Case
Each word is separated by an underscore character:
my_variable_name = "John"


*/

//Difference Between var and :=

/*
                 var	                                                 :=
Can be used inside and outside of functions	         Can only be used inside functions
// ржлрж╛ржВрж╢ржи ржнрж┐рждрж░рзЗ ржПржмржВ ржмрж╛ржЗрж░рзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ           // ржлрж╛ржВрж╢ржи ржнрж┐рждрж░рзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ
Variable declaration and value assignment             Variable declaration and value assignment
can be done separately 	                              cannot be done separately (must be done in the same line)
*/

/*
In Go, variable names generally follow camelCase for local variables and PascalCase for exported (public) variables.

1. CamelCase (Recommended for local variables)
Used for variables that are not exported outside the package.
Example:

userName := "John"
totalAmount := 500
isConnected := true


2. PascalCase (For Exported/Public Variables)
Used for variables that need to be accessed from other packages.
Example:

var ServerPort = 8080
var MaxUsers = 100


3. Snake_case (Rarely Used in Go)
Not common in Go, but sometimes used in constants.
Example:
go
Copy code
const max_limit = 100


ЁЯФ╣ Best Practices for Naming Variables in Go
Keep it short and meaningful
тЭМ var x int тЖТ тЬЕ var count int

Avoid unnecessary abbreviations
тЭМ var usrNm string тЖТ тЬЕ var userName string

Boolean variables should start with is or has
тЬЕ isAvailable
тЬЕ hasPermission

Constants in UPPERCASE (optional)
тЬЕ const MAX_SIZE = 500

Idiomatic Go encourages short variable names for small scopes
тЬЕ i, j, k (for loops or counters)

Would you like examples of exported functions or constants with proper naming conventions?

*/
